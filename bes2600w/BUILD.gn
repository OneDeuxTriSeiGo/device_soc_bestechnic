# Copyright (c) 2021 bestechnic (Shanghai) Technologies CO., LIMITED.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#                                    +-----------------+
#                                    | topographic map |
#                                    +-----------------+
# topographic map descripe how to generate write_flash_gui.tar.gz, according to depends rules.
#
#                                                                          +-----------------------------+
#                                                                  +-----> |    copy_${exe_bin}_to_gui   |
#                                                                  |       +-----------------------------+
#                                                                  |       +-----------------------------+
#                                                                  +-----> |   copy_${fs_name}_to_gui    |
#                                                                  |       +-----------------------------+
#                                                                  |       +-----------------------------+
#                                                                  +-----> | copy_${bsp_bin_name}_to_gui |
#                                                                  |       +-----------------------------+
# +---------------+     +----------------+     +-------------+    /
# | pack_flash_gui| --> | copy_flash_gui | --> | update_yaml | --+
# +---------------+     +----------------+     +-------------+    \
#                                                                  |       +-----------------------------+
#                                                                  +-----> |     conf_yaml_${exe_bin}    |
#                                                                  |       +-----------------------------+
#                                                                  |       +-----------------------------+
#                                                                  +-----> |    conf_yaml_${fs_name}     |
#                                                                  |       +-----------------------------+
#                                                                  |       +-----------------------------+
#                                                                  +-----> |  conf_yaml_${bsp_bin_name}  |
#                                                                          +-----------------------------+
#
# excutable bin topographic map:
#                             +--------+                  +-------------------------------+     +--------------------+     +---------+
#                             | no sig | ---------------> | copy_${exe_bin}_to_relase_bin | --> | gen_bin_${exe_bin} | --> | exe_bin |
#                             +--------+                  +-------------------------------+     +--------------------+     +---------+
# +------------------------+   /                                ^                                                               |
# | copy_${exe_bin}_to_gui | -+                                /|\                                                             \|/
# +------------------------+   \                                |                                                               V
#                             +--------+     +--------------------------+                                         +------------------------+
#                             |  sig   | --> | gen_bin_${burn_name}_sig |                                         | gen_bsp_lib_${exe_bin} |
#                             +--------+     +--------------------------+                                         +------------------------+
#                                                                                                                               |
#                                                                                                                              \|/
#                                                                                                                               V
#                                                                                                                  +--------------------+
#                                                                                                                  | build_sdk_into_lib |
#                                                                                                                  +--------------------+
#
# fs bin topographic map:
#                             +--------+         +------------------+
#                             | no sig | ------> | genfs_${fs_name} |
#                             +--------+         +------------------+
# +------------------------+   /                         ^
# | copy_${fs_name}_to_gui | -+                         /|\
# +------------------------+   \                         |
#                             +--------+     +----------------------+
#                             |  sig   | --> | genfs_${fs_name}_sig |
#                             +--------+     +----------------------+
#
# bsp bin topographic map:
#                                  +--------+         +------------------------------------+     +--------------------+
#                                  | no sig | ------> | copy_${bsp_bin_name}_to_relase_bin | --> | build_sdk_into_lib |
#                                  +--------+         +------------------------------------+     +--------------------+
# +------------------------------+   /                         ^
# | copy_${bsp_bin_name}_to_gui  | -+                         /|\
# +------------------------------+   \                         |
#                                  +--------+     +------------------------------+
#                                  |  sig   | --> | gen_bsp_bin_${burn_name}_sig |
#                                  +--------+     +------------------------------+

import("//build/lite/config/component/lite_component.gni")
import("//build/lite/config/subsystem/lite_subsystem.gni")

group("bes2600w") {
}

# global config
src_yaml = "${product_path}/tools/wifi_Download_cfg.yaml"
dest_yaml = "./write_flash_gui/wifi_Download_cfg.yaml"
temp_yaml = "../../../../out/${board_name}/${product_name}/yaml/"

# build sdk into lib
build_ext_component("build_sdk_into_lib") {
  exec_path = rebase_path("sdk_liteos")

  print("product_name:", product_name)
  build_tz = "false"
  build_mini = "false"

  foreach(bsp_bin, bsp_bin_list) {
    if (bsp_bin.bsp_bin_name == "best2600w_liteos_se") {
      build_tz = bsp_bin.enable
    }
    if (bsp_bin.bsp_bin_name == "best2600w_liteos_mini") {
      build_mini = bsp_bin.enable
    }
  }
  command = "./tools/build_lib_into_hmos_out.sh ${build_tz} ${build_mini} ${ohos_build_type}"
}

build_ext_component("create_yaml_dir") {
  exec_path = rebase_path("burn_tools")
  command = "mkdir -p ${temp_yaml}"
}

# config bin from vendor/bestechnic/<product_name>/config.json
foreach(bin_file, bin_list) {
  build_enable = bin_file.enable

  unstripped_folder = "unstripped/"
  if (ohos_build_type == "release") {
    unstripped_folder = ""
  }
  out_bin_path = "${ohos_root_path}/out/${board_name}/${product_name}/${unstripped_folder}bin/"

  if (build_enable == "true") {
    exe_bin = "${bin_file.elf_name}_${board_name}"
    bsp_target_name = bin_file.bsp_target_name
    print("build", exe_bin, ":", build_enable)

    # copy lib generate by bsp target to out directory.
    copy_lib_name = "gen_bsp_lib_${exe_bin}"
    print("copy_lib_name:", copy_lib_name)
    build_ext_component(copy_lib_name) {
      exec_path = rebase_path(".")
      out_lib_path = "${ohos_root_path}/out/${board_name}/${product_name}/libs/"
      bsp_lib_path =
          "./sdk_liteos/bsp/out/${bsp_target_name}/lib${bsp_target_name}.a"
      command = "cp -rf ${bsp_lib_path} ${out_lib_path}"
      deps = [ ":build_sdk_into_lib" ]
    }

    # generate execute bin
    executable(exe_bin) {
      output_name = exe_bin
      output_extension = "elf"
      deps = [
        ":${copy_lib_name}",
        "//base/startup/bootstrap_lite/services/source:bootstrap",
        "//device/bestechnic/bes2600w/components/utils:sys_adapter",
        "//drivers/adapter/khdf/liteos_m:hdf_lite",
        "//kernel/liteos_m:kernel",
        "//vendor/bestechnic/${product_name}:${product_name}",
      ]

      bsp_path = rebase_path("sdk_liteos")

      ldflags = [
        "-Wl,--wrap=malloc",
        "-Wl,--wrap=calloc",
        "-Wl,--wrap=free",
        "-Wl,--wrap=realloc",
      ]

      ldflags += [
        "-Wl,--gc-sections",
        "-Wl,-Map=bin/$output_name.map",
        "-T$bsp_path/bsp/out/${bsp_target_name}/_best2001.lds",
      ]

      # force link invisible function ,which ar to lib
      ldflags += [ "-Wl,--whole-archive",]
      foreach(force_link_lib, bin_file.force_link_libs) {
        ldflags += [ "-l${force_link_lib}", ]
      }
      ldflags += [ "-Wl,--no-whole-archive",]

      libs = [
        "m",
        "stdc++",
      ]

      libs += [ "${bsp_target_name}" ]

      deps += [ "//build/lite:ohos" ]
    }

    # link target lib into bin
    gen_bin_name = "gen_bin_${exe_bin}"
    build_ext_component(gen_bin_name) {
      exec_path = rebase_path(".")
      src_elf = "${out_bin_path}/${exe_bin}.elf"
      dest_bin = "${out_bin_path}/${exe_bin}.bin"
      command = "arm-none-eabi-objcopy -O binary ${src_elf} ${dest_bin}"
      deps = [ ":${exe_bin}" ]
    }

    burn_name = bin_file.burn_name

    # copy out/<board_name>/<product_name>/bin/ to release bin
    copy_burn_bin_name = "copy_${exe_bin}_to_relase_bin"
    build_ext_component(copy_burn_bin_name) {
      exec_path = rebase_path("burn_tools")
      copy_dest = "./release_bin"
      bin_name_ota = burn_name
      command = "cp -rf ${out_bin_path}/${exe_bin}.bin ${copy_dest}/${bin_name_ota}.bin"
      deps = [ ":${gen_bin_name}" ]
    }

    # sig exe bin to hash_sig bin
    bin_sig = bin_file.signature
    if (bin_sig == "true") {
      gen_bin_name_sig = "gen_bin_${burn_name}_sig"
      build_ext_component(gen_bin_name_sig) {
        exec_path = rebase_path("burn_tools")
        command = "./tools/sig_bin.sh ${burn_name}"
        deps = [ ":${copy_burn_bin_name}" ]
      }
    }

    # if use copy signature bin
    copy_bin_name = "copy_${exe_bin}_to_gui"
    build_ext_component(copy_bin_name) {
      exec_path = rebase_path("burn_tools")
      deps = []
      if (bin_sig == "true") {
        copy_src = "./auto_build_tool/hash_sig"
        bin_name_ota = "${burn_name}_sig"
        deps += [ ":${gen_bin_name_sig}" ]
      } else {
        copy_src = "./release_bin"
        bin_name_ota = burn_name
        deps += [ ":${copy_burn_bin_name}" ]
      }
      command = "cp -rf ${copy_src}/${bin_name_ota}.bin ./write_flash_gui/ota_bin/${burn_name}.bin"
    }

    # config yaml
    conf_bin_name = "conf_yaml_${exe_bin}"
    build_ext_component(conf_bin_name) {
      exec_path = rebase_path("burn_tools")
      addr = bin_file.startaddr
      size = bin_file.bin_size
      command = "python tools/gen_yaml_signle.py ${src_yaml} ${addr} ${burn_name} ${size} ${temp_yaml}"
      deps = [ ":create_yaml_dir" ]
    }
  }
}

# generate file system bin from resources/ and sig or not sig before copy to write_flash_gui
foreach(fs_bin, fs_list) {
  fs_enable = fs_bin.enable

  if (fs_enable == "true") {
    fs_name = fs_bin.fs_name

    # generate fs bin to release bin
    gen_fs_name = "genfs_${fs_name}"
    fs_size = fs_bin.fs_size
    fs_src = fs_bin.fs_src
    block_size = fs_bin.block_size
    build_ext_component(gen_fs_name) {
      exec_path = rebase_path("${product_path}/fs")
      command = "./genfs.sh ${block_size} ${fs_size} ${fs_src} ${fs_name}"
    }

    # sig fs bin to hash_sig bin
    fs_sig = fs_bin.signature
    if (fs_sig == "true") {
      gen_fs_name_sig = "genfs_${fs_name}_sig"
      build_ext_component(gen_fs_name_sig) {
        exec_path = rebase_path("burn_tools")
        command = "./tools/sig_fs.sh ${fs_name}"
        deps = [ ":${gen_fs_name}" ]
      }
    }

    # if use copy signature bin
    copy_fs_name = "copy_${fs_name}_to_gui"
    build_ext_component(copy_fs_name) {
      exec_path = rebase_path("burn_tools")
      deps = []
      if (fs_sig == "true") {
        copy_src = "./auto_build_tool/hash_sig"
        fs_name_ota = "${fs_name}_sig"
        deps += [ ":${gen_fs_name_sig}" ]
      } else {
        copy_src = "./release_bin"
        fs_name_ota = fs_name
        deps += [ ":${gen_fs_name}" ]
      }
      command = "cp -rf ./${copy_src}/${fs_name_ota}.bin ./write_flash_gui/ota_bin/${fs_name}.bin"
    }

    # config yaml
    conf_fs_name = "conf_yaml_${fs_name}"
    build_ext_component(conf_fs_name) {
      exec_path = rebase_path("burn_tools")
      addr = fs_bin.startaddr
      size = fs_bin.fs_size
      burn_name = fs_name
      command = "python tools/gen_yaml_signle.py ${src_yaml} ${addr} ${burn_name} ${size} ${temp_yaml}"
    }
  }
}

# generate bsp bin from bsp and sig or not sig before copy to write_flash_gui
foreach(bsp_bin, bsp_bin_list) {
  bsp_bin_enable = bsp_bin.enable

  if (bsp_bin_enable == "true") {
    bsp_bin_name = bsp_bin.bsp_bin_name
    burn_name = bsp_bin.burn_name
    # copy ./sdk_liteos/bsp/out/<bsp_bin_name>/<bsp_bin_name>.bin to release bin
    copy_burn_bin_name = "copy_${bsp_bin_name}_to_relase_bin"
    build_ext_component(copy_burn_bin_name) {
      exec_path = rebase_path(".")
      bsp_out_bin_path = "./sdk_liteos/bsp/out/${bsp_bin_name}"
      copy_dest = "./burn_tools/release_bin"
      bin_name_ota = burn_name
      command = "cp -rf ${bsp_out_bin_path}/${bsp_bin_name}.bin ${copy_dest}/${bin_name_ota}.bin"
      deps = [ ":build_sdk_into_lib" ]
    }

    # sig exe bin to hash_sig bin
    bsp_bin_sig = bsp_bin.signature
    if (bsp_bin_sig == "true") {
      gen_bsp_bin_name_sig = "gen_bsp_bin_${burn_name}_sig"
      build_ext_component(gen_bsp_bin_name_sig) {
        exec_path = rebase_path("burn_tools")
        command = "./sig_bin.sh ${burn_name}"
        deps = [ ":${copy_burn_bin_name}" ]
      }
    }

    # if use copy bsp signature bin
    copy_bsp_bin_name = "copy_${bsp_bin_name}_to_gui"
    build_ext_component(copy_bsp_bin_name) {
      exec_path = rebase_path("burn_tools")
      deps = []
      if (bsp_bin_sig == "true") {
        copy_src = "./auto_build_tool/hash_sig"
        bsp_bin_name_ota = "${burn_name}_sig"
        deps += [ ":${gen_bsp_bin_name_sig}" ]
      } else {
        copy_src = "./release_bin"
        bsp_bin_name_ota = burn_name
        deps += [ ":${copy_burn_bin_name}" ]
      }
      command = "cp -rf ./${copy_src}/${bsp_bin_name_ota}.bin ./write_flash_gui/ota_bin/${bsp_bin_name_ota}.bin"
    }

    # config yaml
    conf_bsp_bin_name = "conf_yaml_${bsp_bin_name}"
    build_ext_component(conf_bsp_bin_name) {
      exec_path = rebase_path("burn_tools")
      addr = bsp_bin.startaddr
      size = bsp_bin.bin_size
      burn_name = bsp_bin.bsp_bin_name
      command = "python tools/gen_yaml_signle.py ${src_yaml} ${addr} ${burn_name} ${size} ${temp_yaml}"
    }
  }
}

# update yaml config
build_ext_component("update_yaml") {
  exec_path = rebase_path("burn_tools")
  command = "python tools/gen_yaml.py ${src_yaml} ${dest_yaml} ${temp_yaml}"

  # bin configed from vendor/bestechnic/<product_name>/config.json
  foreach(bin_file, bin_list) {
    build_enable = bin_file.enable

    if (build_enable == "true") {
      exe_bin = "${bin_file.elf_name}_${board_name}"
      copy_bin_name = "copy_${exe_bin}_to_gui"
      conf_bin_name = "conf_yaml_${exe_bin}"
      deps = [
        ":${conf_bin_name}",
        ":${copy_bin_name}",
      ]
    }
  }

  # fs bin configed from vendor/bestechnic/<product_name>/config.json
  foreach(fs_bin, fs_list) {
    fs_enable = fs_bin.enable

    if (fs_enable == "true") {
      fs_name = fs_bin.fs_name
      copy_fs_name = "copy_${fs_name}_to_gui"
      conf_fs_name = "conf_yaml_${fs_name}"
      if (fs_enable == "true") {
        deps += [
          ":${conf_fs_name}",
          ":${copy_fs_name}",
        ]
      }
    }
  }

  # bsp bin configed from vendor/bestechnic/<product_name>/config.json
  foreach(bsp_bin, bsp_bin_list) {
    bsp_bin_enable = bsp_bin.enable

    if (bsp_bin_enable == "true") {
      bsp_bin_name = bsp_bin.bsp_bin_name
      copy_bsp_bin_name = "copy_${bsp_bin_name}_to_gui"
      conf_bsp_bin_name = "conf_yaml_${bsp_bin_name}"
      deps += [
        ":${conf_bsp_bin_name}",
        ":${copy_bsp_bin_name}",
      ]
    }
  }
}

# copy to out/<chip model>/<product_name>/
copy("copy_flash_gui") {
  sources = [ "//device/bestechnic/${board_name}/burn_tools/write_flash_gui" ]
  outputs = [ "$target_out_dir/../../../../{{source_file_part}}" ]

  deps = [ ":update_yaml" ]
}

# pack write flash gui to write_flash_gui-<time>.tar.gz
build_ext_component("pack_flash_gui") {
  exec_path = rebase_path("burn_tools")
  command = "./tools/pack_burn_tools.sh ${ohos_root_path}/out/${board_name}/${product_name}/"
  deps = [ ":copy_flash_gui" ]
}
